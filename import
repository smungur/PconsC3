mport subprocess
import argparse

def run_command(cmd, msg):
    print(f"\n🚀 {msg}")
    print(f"➜ {cmd}")
    result = subprocess.run(cmd, shell=True)
    if result.returncode != 0:
        raise RuntimeError(f"❌ Erreur dans l'étape : {msg}")

def prepare_alignment(a3m_path):
    if not os.path.isfile(a3m_path):
        raise FileNotFoundError(f"Fichier introuvable : {a3m_path}")

    base = os.path.splitext(a3m_path)[0]
    filtered = f"{base}_filtered.a3m"
    treefile = f"{base}_tree.nwk"

    # 1. Filtrage avec hhfilter
    run_command(
        f"hhfilter -i {a3m_path} -o {filtered} -diff 90 -cov 75",
        "Filtrage de l'alignement avec hhfilter"
    )

    # 2. Arbre guide avec Clustal Omega
    run_command(
        f"clustalo -i {filtered} --guidetree-out {treefile} --force",
        "Construction de l'arbre guide avec Clustal Omega"
    )

    print("\n✅ Terminé.")
    print(f"📁 Alignement filtré : {filtered}")
    print(f"🌳 Arbre généré     : {treefile}")
    print("\nTu peux maintenant réutiliser le fichier filtré dans PconsC3.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Préparer un alignement pour PconsC3")
    parser.add_argument("a3m_file", help="Chemin vers le fichier alignment.a3m")
    args = parser.parse_args()

    prepare_alignment(args.a3m_file)

